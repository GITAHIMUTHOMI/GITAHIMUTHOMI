import pandas as pd

# Step 2: Data Loading & Exploration

# Load the dataset
df = pd.read_csv(r"C:\Users\patrick.muthomi\OneDrive - IFRC\Documents\HTML\Week 8\owid-covid-data.csv")

# Check columns
print("Columns in the dataset:")
print(df.columns)

# Preview first 5 rows
print("\nFirst 5 rows:")
print(df.head())

# Identify missing values per column
print("\nMissing values per column:")
print(df.isnull().sum())

# Key columns to focus on
key_columns = ["date", "location", "total_cases", "total_deaths", "new_cases", "new_deaths", "total_vaccinations"]
print("\nKey columns preview:")
print(df[key_columns].head())

#Step 3 Data Cleaning

# Filter countries of interest
countries = ["Kenya", "United States", "India"]
df_filtered = df[df["location"].isin(countries)]

# Drop rows with missing dates or critical values (e.g., total_cases)
df_filtered = df_filtered.dropna(subset=["date", "total_cases"])

# Convert date column to datetime
df_filtered["date"] = pd.to_datetime(df_filtered["date"])

# Handle missing numeric values (forward fill, then backward fill)
numeric_cols = ["total_cases", "total_deaths", "new_cases", "new_deaths", "total_vaccinations"]
df_filtered[numeric_cols] = df_filtered[numeric_cols].fillna(method="ffill").fillna(method="bfill")

# Preview cleaned data
print("\nCleaned data preview:")
print(df_filtered.head())

# Step 4: Exploratory Data Analysis (EDA)

import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Set style for better-looking plots
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")

# Create figure with subplots
fig, axes = plt.subplots(2, 2, figsize=(15, 12))
fig.suptitle('COVID-19 Data Analysis: EDA Dashboard', fontsize=16, fontweight='bold')

# 1. Plot total cases over time for selected countries
ax1 = axes[0, 0]
for country in countries:
    country_data = df_filtered[df_filtered['location'] == country]
    ax1.plot(country_data['date'], country_data['total_cases'], 
             label=country, linewidth=2, marker='o', markersize=3)
ax1.set_title('Total COVID-19 Cases Over Time', fontweight='bold')
ax1.set_xlabel('Date')
ax1.set_ylabel('Total Cases')
ax1.legend()
ax1.tick_params(axis='x', rotation=45)
ax1.grid(True, alpha=0.3)

# 2. Plot total deaths over time
ax2 = axes[0, 1]
for country in countries:
    country_data = df_filtered[df_filtered['location'] == country]
    ax2.plot(country_data['date'], country_data['total_deaths'], 
             label=country, linewidth=2, marker='s', markersize=3)
ax2.set_title('Total COVID-19 Deaths Over Time', fontweight='bold')
ax2.set_xlabel('Date')
ax2.set_ylabel('Total Deaths')
ax2.legend()
ax2.tick_params(axis='x', rotation=45)
ax2.grid(True, alpha=0.3)

# 3. Compare daily new cases between countries (recent data)
ax3 = axes[1, 0]
# Get recent data (last 30 days with data)
recent_data = df_filtered.groupby('location').tail(30)
sns.boxplot(data=recent_data, x='location', y='new_cases', ax=ax3)
ax3.set_title('Daily New Cases Distribution (Recent Data)', fontweight='bold')
ax3.set_xlabel('Country')
ax3.set_ylabel('New Cases')
ax3.tick_params(axis='x', rotation=45)

# 4. Calculate and visualize death rate
df_filtered['death_rate'] = (df_filtered['total_deaths'] / df_filtered['total_cases']) * 100
ax4 = axes[1, 1]
for country in countries:
    country_data = df_filtered[df_filtered['location'] == country]
    # Remove inf and nan values for death rate
    country_data_clean = country_data.dropna(subset=['death_rate'])
    country_data_clean = country_data_clean[np.isfinite(country_data_clean['death_rate'])]
    ax4.plot(country_data_clean['date'], country_data_clean['death_rate'], 
             label=country, linewidth=2, marker='^', markersize=3)
ax4.set_title('Death Rate Over Time (%)', fontweight='bold')
ax4.set_xlabel('Date')
ax4.set_ylabel('Death Rate (%)')
ax4.legend()
ax4.tick_params(axis='x', rotation=45)
ax4.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# Additional Analysis: Bar chart of peak cases
print("\n" + "="*50)
print("DESCRIPTIVE STATISTICS")
print("="*50)

# Get latest data for each country
latest_data = df_filtered.groupby('location').tail(1)
print("\nLatest COVID-19 Statistics:")
print(latest_data[['location', 'date', 'total_cases', 'total_deaths', 'total_vaccinations']].to_string(index=False))

# Calculate summary statistics
print("\nSummary Statistics by Country:")
summary_stats = df_filtered.groupby('location')[['total_cases', 'total_deaths', 'new_cases', 'new_deaths']].agg({
    'total_cases': ['max', 'mean'],
    'total_deaths': ['max', 'mean'], 
    'new_cases': ['max', 'mean'],
    'new_deaths': ['max', 'mean']
}).round(2)
print(summary_stats)

# Bar chart: Top countries by total cases
plt.figure(figsize=(10, 6))
latest_cases = latest_data.set_index('location')['total_cases'].sort_values(ascending=False)
bars = plt.bar(latest_cases.index, latest_cases.values, 
               color=['#FF6B6B', '#4ECDC4', '#45B7D1'])
plt.title('Total COVID-19 Cases by Country (Latest Data)', fontsize=14, fontweight='bold')
plt.xlabel('Country')
plt.ylabel('Total Cases')
plt.xticks(rotation=45)
plt.grid(axis='y', alpha=0.3)

# Add value labels on bars
for bar in bars:
    height = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2., height,
             f'{int(height):,}', ha='center', va='bottom', fontweight='bold')

plt.tight_layout()
plt.show()

# Correlation analysis (optional heatmap)
print("\n" + "="*50)
print("CORRELATION ANALYSIS")
print("="*50)

# Select numeric columns for correlation
corr_columns = ['total_cases', 'total_deaths', 'new_cases', 'new_deaths', 'total_vaccinations']
correlation_data = df_filtered[corr_columns].corr()

plt.figure(figsize=(10, 8))
mask = np.triu(np.ones_like(correlation_data, dtype=bool))
sns.heatmap(correlation_data, mask=mask, annot=True, cmap='coolwarm', 
            center=0, square=True, fmt='.2f', cbar_kws={'shrink': 0.8})
plt.title('Correlation Matrix: COVID-19 Metrics', fontsize=14, fontweight='bold')
plt.tight_layout()
plt.show()

print("\nCorrelation Matrix:")
print(correlation_data.round(3))

# Step 5: Visualizing Vaccination Progress

print("\n" + "="*60)
print("VACCINATION PROGRESS ANALYSIS")
print("="*60)

# Create vaccination analysis figure
fig, axes = plt.subplots(2, 2, figsize=(16, 12))
fig.suptitle('COVID-19 Vaccination Progress Analysis', fontsize=16, fontweight='bold')

# 1. Plot cumulative vaccinations over time
ax1 = axes[0, 0]
for country in countries:
    country_data = df_filtered[df_filtered['location'] == country]
    # Filter out rows where total_vaccinations is NaN or 0
    vacc_data = country_data.dropna(subset=['total_vaccinations'])
    vacc_data = vacc_data[vacc_data['total_vaccinations'] > 0]
    
    if not vacc_data.empty:
        ax1.plot(vacc_data['date'], vacc_data['total_vaccinations'], 
                 label=country, linewidth=3, marker='o', markersize=4)

ax1.set_title('Cumulative COVID-19 Vaccinations Over Time', fontweight='bold', fontsize=12)
ax1.set_xlabel('Date')
ax1.set_ylabel('Total Vaccinations')
ax1.legend()
ax1.tick_params(axis='x', rotation=45)
ax1.grid(True, alpha=0.3)
ax1.ticklabel_format(style='scientific', axis='y', scilimits=(0,0))

# 2. Vaccination rate (daily new vaccinations) over time
ax2 = axes[0, 1]
# Calculate daily vaccination rate
for country in countries:
    country_data = df_filtered[df_filtered['location'] == country].copy()
    country_data = country_data.sort_values('date')
    country_data['daily_vaccinations'] = country_data['total_vaccinations'].diff()
    
    # Filter positive values and remove outliers
    daily_vacc = country_data.dropna(subset=['daily_vaccinations'])
    daily_vacc = daily_vacc[daily_vacc['daily_vaccinations'] > 0]
    
    if not daily_vacc.empty:
        # Use rolling average to smooth the data
        daily_vacc['vaccination_7day_avg'] = daily_vacc['daily_vaccinations'].rolling(window=7).mean()
        ax2.plot(daily_vacc['date'], daily_vacc['vaccination_7day_avg'], 
                 label=f'{country} (7-day avg)', linewidth=2, marker='s', markersize=3)

ax2.set_title('Daily Vaccination Rate (7-day Average)', fontweight='bold', fontsize=12)
ax2.set_xlabel('Date')
ax2.set_ylabel('Daily Vaccinations')
ax2.legend()
ax2.tick_params(axis='x', rotation=45)
ax2.grid(True, alpha=0.3)
ax2.ticklabel_format(style='scientific', axis='y', scilimits=(0,0))

# 3. Compare latest vaccination numbers (Bar chart)
ax3 = axes[1, 0]
latest_vacc_data = []
countries_with_data = []

for country in countries:
    country_data = df_filtered[df_filtered['location'] == country]
    vacc_data = country_data.dropna(subset=['total_vaccinations'])
    vacc_data = vacc_data[vacc_data['total_vaccinations'] > 0]
    
    if not vacc_data.empty:
        latest_vacc = vacc_data.iloc[-1]['total_vaccinations']
        latest_vacc_data.append(latest_vacc)
        countries_with_data.append(country)

if countries_with_data:
    bars = ax3.bar(countries_with_data, latest_vacc_data, 
                   color=['#FF6B6B', '#4ECDC4', '#45B7D1'][:len(countries_with_data)])
    ax3.set_title('Total Vaccinations by Country (Latest Data)', fontweight='bold', fontsize=12)
    ax3.set_xlabel('Country')
    ax3.set_ylabel('Total Vaccinations')
    ax3.tick_params(axis='x', rotation=45)
    ax3.grid(axis='y', alpha=0.3)
    ax3.ticklabel_format(style='scientific', axis='y', scilimits=(0,0))
    
    # Add value labels on bars
    for bar, value in zip(bars, latest_vacc_data):
        height = bar.get_height()
        ax3.text(bar.get_x() + bar.get_width()/2., height,
                 f'{value/1e6:.1f}M', ha='center', va='bottom', fontweight='bold')

# 4. Vaccination progress percentage (if population data available)
ax4 = axes[1, 1]
# Create a sample vaccination progress chart
# Note: This assumes we have population data or uses estimated values
population_estimates = {
    'Kenya': 54e6,          # ~54 million
    'United States': 331e6,  # ~331 million  
    'India': 1380e6         # ~1.38 billion
}

vacc_percentages = []
countries_percent = []

for country in countries_with_data:
    if country in population_estimates:
        latest_vacc = latest_vacc_data[countries_with_data.index(country)]
        # Assuming each vaccination represents one person (simplified)
        vacc_percentage = (latest_vacc / population_estimates[country]) * 100
        vacc_percentages.append(min(vacc_percentage, 100))  # Cap at 100%
        countries_percent.append(country)

if countries_percent:
    bars = ax4.bar(countries_percent, vacc_percentages, 
                   color=['#2ECC71', '#3498DB', '#E74C3C'][:len(countries_percent)])
    ax4.set_title('Vaccination Coverage (% of Population)', fontweight='bold', fontsize=12)
    ax4.set_xlabel('Country')
    ax4.set_ylabel('Vaccination Coverage (%)')
    ax4.set_ylim(0, 100)
    ax4.tick_params(axis='x', rotation=45)
    ax4.grid(axis='y', alpha=0.3)
    
    # Add percentage labels on bars
    for bar, percentage in zip(bars, vacc_percentages):
        height = bar.get_height()
        ax4.text(bar.get_x() + bar.get_width()/2., height + 1,
                 f'{percentage:.1f}%', ha='center', va='bottom', fontweight='bold')

plt.tight_layout()
plt.show()

# Vaccination Statistics Summary
print("\nVaccination Progress Summary:")
print("-" * 40)

for i, country in enumerate(countries_with_data):
    latest_vacc = latest_vacc_data[i]
    print(f"\n{country}:")
    print(f"  Total Vaccinations: {latest_vacc:,.0f}")
    
    if country in population_estimates:
        coverage = (latest_vacc / population_estimates[country]) * 100
        print(f"  Estimated Coverage: {coverage:.1f}% of population")
        print(f"  Population (est.): {population_estimates[country]/1e6:.0f} million")

# Optional: Pie chart for vaccination status (for one country as example)
if countries_with_data:
    plt.figure(figsize=(12, 4))
    
    for i, country in enumerate(countries_with_data[:3]):  # Limit to 3 countries
        if country in population_estimates:
            plt.subplot(1, 3, i+1)
            
            vaccinated = latest_vacc_data[i]
            population = population_estimates[country]
            unvaccinated = max(0, population - vaccinated)
            
            # Create pie chart
            sizes = [vaccinated, unvaccinated]
            labels = ['Vaccinated', 'Unvaccinated']
            colors = ['#2ECC71', '#E74C3C']
            explode = (0.05, 0)  # Slightly separate the vaccinated slice
            
            plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%',
                    startangle=90, explode=explode, shadow=True)
            plt.title(f'{country}\nVaccination Status', fontweight='bold')
    
    plt.suptitle('Vaccination Status by Country (Estimated)', fontsize=14, fontweight='bold')
    plt.tight_layout()
    plt.show()

print(f"\n{'='*60}")
print("VACCINATION ANALYSIS COMPLETE")
print(f"{'='*60}")
print("\nKey Insights:")
print("• Vaccination rollout patterns vary significantly between countries")
print("• Daily vaccination rates show the pace of immunization campaigns")
print("• Coverage percentages help assess population-level protection")
print("• Data quality may vary - some countries have incomplete vaccination records")

# Step 6: Build Choropleth Maps

print("\n" + "="*60)
print("CHOROPLETH MAP VISUALIZATION")
print("="*60)

# Check if plotly is available, if not provide installation instructions
try:
    import plotly.express as px
    import plotly.graph_objects as go
    from plotly.subplots import make_subplots
    import plotly.offline as pyo
    
    # Set plotly to work in offline mode for better compatibility
    pyo.init_notebook_mode(connected=True)
    print("✅ Plotly loaded successfully")
    
except ImportError:
    print("❌ Plotly not installed. Please install it using:")
    print("pip install plotly")
    print("Then restart the kernel and run again.")
    
    # Fallback: Create static maps with matplotlib and basemap (if available)
    print("\nFalling back to matplotlib visualization...")
    
    # Create a simple world map substitute using matplotlib
    plt.figure(figsize=(15, 8))
    
    # Get latest global data
    df_latest_all = df.groupby('location').tail(1).reset_index(drop=True)
    non_countries = ['World', 'Europe', 'Asia', 'Africa', 'North America', 'South America', 
                    'Oceania', 'European Union', 'High income', 'Upper middle income', 
                    'Lower middle income', 'Low income']
    df_map_fallback = df_latest_all[~df_latest_all['location'].isin(non_countries)].copy()
    
    # Create bar chart showing top 20 countries by cases
    top_20_cases = df_map_fallback.nlargest(20, 'total_cases')
    
    plt.subplot(2, 1, 1)
    bars = plt.bar(range(len(top_20_cases)), top_20_cases['total_cases'], 
                   color='red', alpha=0.7)
    plt.title('Top 20 Countries by Total COVID-19 Cases', fontsize=14, fontweight='bold')
    plt.ylabel('Total Cases')
    plt.xticks(range(len(top_20_cases)), top_20_cases['location'], rotation=45, ha='right')
    plt.grid(axis='y', alpha=0.3)
    
    # Add value labels
    for i, bar in enumerate(bars):
        height = bar.get_height()
        plt.text(bar.get_x() + bar.get_width()/2., height,
                 f'{height/1e6:.1f}M', ha='center', va='bottom', fontweight='bold')
    
    # Create vaccination chart
    plt.subplot(2, 1, 2)
    vacc_data = df_map_fallback.dropna(subset=['total_vaccinations'])
    vacc_data = vacc_data[vacc_data['total_vaccinations'] > 0]
    top_20_vacc = vacc_data.nlargest(20, 'total_vaccinations')
    
    if not top_20_vacc.empty:
        bars = plt.bar(range(len(top_20_vacc)), top_20_vacc['total_vaccinations'], 
                       color='green', alpha=0.7)
        plt.title('Top 20 Countries by Total Vaccinations', fontsize=14, fontweight='bold')
        plt.ylabel('Total Vaccinations')
        plt.xticks(range(len(top_20_vacc)), top_20_vacc['location'], rotation=45, ha='right')
        plt.grid(axis='y', alpha=0.3)
        
        # Add value labels
        for i, bar in enumerate(bars):
            height = bar.get_height()
            plt.text(bar.get_x() + bar.get_width()/2., height,
                     f'{height/1e6:.1f}M', ha='center', va='bottom', fontweight='bold')
    
    plt.tight_layout()
    plt.show()
    
    print("Created fallback visualization with matplotlib")
    exit()

# Prepare data for choropleth maps
print("Preparing data for world map visualization...")

# Get the latest data for all countries (not just our selected 3)
df_latest_all = df.groupby('location').tail(1).reset_index(drop=True)

# Remove non-country entries (continents, income groups, etc.)
non_countries = ['World', 'Europe', 'Asia', 'Africa', 'North America', 'South America', 
                'Oceania', 'European Union', 'High income', 'Upper middle income', 
                'Lower middle income', 'Low income']

df_map = df_latest_all[~df_latest_all['location'].isin(non_countries)].copy()

# Ensure we have required columns
required_cols = ['iso_code', 'location', 'total_cases', 'total_deaths', 'total_vaccinations']
df_map = df_map.dropna(subset=['iso_code'])  # Need iso_code for mapping

# Create derived metrics
df_map['cases_per_million'] = df_map.get('total_cases_per_million', 0)
df_map['deaths_per_million'] = df_map.get('total_deaths_per_million', 0)
df_map['vaccinations_per_hundred'] = df_map.get('total_vaccinations_per_hundred', 0)

# If per capita columns don't exist, calculate them
if 'population' in df_map.columns:
    df_map['cases_per_million'] = (df_map['total_cases'] / df_map['population']) * 1e6
    df_map['deaths_per_million'] = (df_map['total_deaths'] / df_map['population']) * 1e6
    df_map['vaccinations_per_hundred'] = (df_map['total_vaccinations'] / df_map['population']) * 100

print(f"Data prepared for {len(df_map)} countries/regions")

# 1. Choropleth Map: Total Cases
print("\nCreating choropleth map for COVID-19 cases...")

fig_cases = px.choropleth(
    df_map,
    locations="iso_code",
    color="total_cases",
    hover_name="location",
    hover_data={
        'total_cases': ':,.0f',
        'total_deaths': ':,.0f',
        'iso_code': False
    },
    color_continuous_scale="Reds",
    title="COVID-19 Total Cases by Country (World Map)",
    labels={'total_cases': 'Total Cases'}
)

fig_cases.update_layout(
    title_x=0.5,
    title_font_size=16,
    geo=dict(
        showframe=False,
        showcoastlines=True,
        projection_type='equirectangular'
    ),
    width=1000,
    height=600
)

fig_cases.show()

# 2. Choropleth Map: Cases per Million (Population-adjusted)
if 'cases_per_million' in df_map.columns and df_map['cases_per_million'].notna().any():
    print("\nCreating choropleth map for cases per million...")
    
    fig_cases_per_million = px.choropleth(
        df_map,
        locations="iso_code",
        color="cases_per_million",
        hover_name="location",
        hover_data={
            'cases_per_million': ':,.0f',
            'total_cases': ':,.0f',
            'iso_code': False
        },
        color_continuous_scale="OrRd",
        title="COVID-19 Cases per Million Population (World Map)",
        labels={'cases_per_million': 'Cases per Million'}
    )
    
    fig_cases_per_million.update_layout(
        title_x=0.5,
        title_font_size=16,
        geo=dict(
            showframe=False,
            showcoastlines=True,
            projection_type='equirectangular'
        ),
        width=1000,
        height=600
    )
    
    fig_cases_per_million.show()

# 3. Choropleth Map: Total Deaths
print("\nCreating choropleth map for COVID-19 deaths...")

fig_deaths = px.choropleth(
    df_map,
    locations="iso_code",
    color="total_deaths",
    hover_name="location",
    hover_data={
        'total_deaths': ':,.0f',
        'total_cases': ':,.0f',
        'iso_code': False
    },
    color_continuous_scale="plasma",
    title="COVID-19 Total Deaths by Country (World Map)",
    labels={'total_deaths': 'Total Deaths'}
)

fig_deaths.update_layout(
    title_x=0.5,
    title_font_size=16,
    geo=dict(
        showframe=False,
        showcoastlines=True,
        projection_type='equirectangular'
    ),
    width=1000,
    height=600
)

fig_deaths.show()

# 4. Choropleth Map: Vaccination Rates
if 'total_vaccinations' in df_map.columns and df_map['total_vaccinations'].notna().any():
    print("\nCreating choropleth map for vaccination progress...")
    
    # Filter countries with vaccination data
    df_vacc_map = df_map.dropna(subset=['total_vaccinations'])
    df_vacc_map = df_vacc_map[df_vacc_map['total_vaccinations'] > 0]
    
    if len(df_vacc_map) > 0:
        fig_vaccinations = px.choropleth(
            df_vacc_map,
            locations="iso_code",
            color="total_vaccinations",
            hover_name="location",
            hover_data={
                'total_vaccinations': ':,.0f',
                'total_cases': ':,.0f',
                'iso_code': False
            },
            color_continuous_scale="Greens",
            title="COVID-19 Total Vaccinations by Country (World Map)",
            labels={'total_vaccinations': 'Total Vaccinations'}
        )
        
        fig_vaccinations.update_layout(
            title_x=0.5,
            title_font_size=16,
            geo=dict(
                showframe=False,
                showcoastlines=True,
                projection_type='equirectangular'
            ),
            width=1000,
            height=600
        )
        
        fig_vaccinations.show()

# 5. Multi-panel Dashboard
print("\nCreating comprehensive choropleth dashboard...")

# Create subplots
fig_dashboard = make_subplots(
    rows=2, cols=2,
    subplot_titles=('Total Cases', 'Total Deaths', 'Total Vaccinations', 'Cases per Million'),
    specs=[[{"type": "geo"}, {"type": "geo"}],
           [{"type": "geo"}, {"type": "geo"}]]
)

# Add cases map
fig_dashboard.add_trace(
    go.Choropleth(
        locations=df_map['iso_code'],
        z=df_map['total_cases'],
        text=df_map['location'],
        colorscale='Reds',
        showscale=False,
        name='Total Cases'
    ),
    row=1, col=1
)

# Add deaths map
fig_dashboard.add_trace(
    go.Choropleth(
        locations=df_map['iso_code'],
        z=df_map['total_deaths'],
        text=df_map['location'],
        colorscale='plasma',
        showscale=False,
        name='Total Deaths'
    ),
    row=1, col=2
)

# Add vaccinations map (if data available)
if len(df_vacc_map) > 0:
    fig_dashboard.add_trace(
        go.Choropleth(
            locations=df_vacc_map['iso_code'],
            z=df_vacc_map['total_vaccinations'],
            text=df_vacc_map['location'],
            colorscale='Greens',
            showscale=False,
            name='Total Vaccinations'
        ),
        row=2, col=1
    )

# Add cases per million map (if data available)
if 'cases_per_million' in df_map.columns and df_map['cases_per_million'].notna().any():
    fig_dashboard.add_trace(
        go.Choropleth(
            locations=df_map['iso_code'],
            z=df_map['cases_per_million'],
            text=df_map['location'],
            colorscale='OrRd',
            showscale=False,
            name='Cases per Million'
        ),
        row=2, col=2
    )

# Update layout for dashboard
fig_dashboard.update_layout(
    title_text="COVID-19 Global Impact Dashboard",
    title_x=0.5,
    title_font_size=20,
    showlegend=False,
    width=1200,
    height=800
)

# Update geo layout for all subplots
for i in range(1, 5):
    fig_dashboard.update_geos(
        showframe=False,
        showcoastlines=True,
        projection_type='natural earth',
        row=(i-1)//2 + 1,
        col=(i-1)%2 + 1
    )

fig_dashboard.show()

# Summary statistics for the map data
print("\n" + "="*50)
print("GLOBAL COVID-19 STATISTICS SUMMARY")
print("="*50)

print(f"\nCountries with data: {len(df_map)}")
print(f"Countries with vaccination data: {len(df_vacc_map) if 'df_vacc_map' in locals() else 0}")

# Top 10 countries by cases
top_cases = df_map.nlargest(10, 'total_cases')[['location', 'total_cases', 'total_deaths']]
print(f"\nTop 10 Countries by Total Cases:")
print(top_cases.to_string(index=False))

# Highlight our selected countries
print(f"\nOur Selected Countries Performance:")
our_countries_data = df_map[df_map['location'].isin(countries)]
if not our_countries_data.empty:
    print(our_countries_data[['location', 'total_cases', 'total_deaths', 'total_vaccinations']].to_string(index=False))

print(f"\n{'='*60}")
print("CHOROPLETH MAP ANALYSIS COMPLETE")
print(f"{'='*60}")
print("\nKey Features:")
print("• Interactive world maps showing global COVID-19 impact")
print("• Color-coded visualization of cases, deaths, and vaccinations")
print("• Population-adjusted metrics for fair country comparisons")
print("• Comprehensive dashboard with multiple perspectives")
print("• Hover data showing detailed country information")

# Step 7: Insights & Reporting

print("\n" + "="*60)
print("COVID-19 DATA ANALYSIS: KEY INSIGHTS & FINDINGS")
print("="*60)

# Calculate key metrics for insights
print("\nGenerating comprehensive insights from the analysis...")

# 1. Peak infection periods
print("\n🔍 INSIGHT 1: PEAK INFECTION PERIODS")
print("-" * 40)
for country in countries:
    country_data = df_filtered[df_filtered['location'] == country]
    if not country_data.empty:
        peak_cases_date = country_data.loc[country_data['new_cases'].idxmax(), 'date']
        peak_cases_value = country_data['new_cases'].max()
        print(f"{country}:")
        print(f"  • Peak daily cases: {peak_cases_value:,.0f} on {peak_cases_date.strftime('%B %d, %Y')}")

# 2. Vaccination rollout speed analysis
print("\n🚀 INSIGHT 2: VACCINATION ROLLOUT ANALYSIS")
print("-" * 40)
vaccination_insights = {}
for country in countries:
    country_data = df_filtered[df_filtered['location'] == country]
    vacc_data = country_data.dropna(subset=['total_vaccinations'])
    vacc_data = vacc_data[vacc_data['total_vaccinations'] > 0]
    
    if len(vacc_data) > 1:
        # Calculate vaccination start date and speed
        vacc_start = vacc_data['date'].min()
        vacc_latest = vacc_data['date'].max()
        days_vaccinating = (vacc_latest - vacc_start).days
        total_vaccinations = vacc_data['total_vaccinations'].iloc[-1]
        daily_avg = total_vaccinations / max(days_vaccinating, 1)
        
        vaccination_insights[country] = {
            'start_date': vacc_start,
            'total_vaccinations': total_vaccinations,
            'daily_average': daily_avg,
            'days_active': days_vaccinating
        }
        
        print(f"{country}:")
        print(f"  • Vaccination started: {vacc_start.strftime('%B %d, %Y')}")
        print(f"  • Daily average: {daily_avg:,.0f} vaccinations/day")
        print(f"  • Total administered: {total_vaccinations:,.0f}")

# 3. Mortality rate analysis
print("\n💔 INSIGHT 3: MORTALITY RATE PATTERNS")
print("-" * 40)
for country in countries:
    country_data = df_filtered[df_filtered['location'] == country]
    if not country_data.empty:
        latest_data = country_data.iloc[-1]
        mortality_rate = (latest_data['total_deaths'] / latest_data['total_cases']) * 100
        print(f"{country}:")
        print(f"  • Overall mortality rate: {mortality_rate:.2f}%")
        print(f"  • Total deaths: {latest_data['total_deaths']:,.0f}")

# 4. Timeline analysis
print("\n📅 INSIGHT 4: PANDEMIC TIMELINE ANALYSIS")
print("-" * 40)
for country in countries:
    country_data = df_filtered[df_filtered['location'] == country]
    if not country_data.empty:
        first_case_date = country_data[country_data['total_cases'] > 0]['date'].min()
        first_death_date = country_data[country_data['total_deaths'] > 0]['date'].min()
        
        print(f"{country}:")
        print(f"  • First reported case: {first_case_date.strftime('%B %d, %Y')}")
        if pd.notna(first_death_date):
            days_to_first_death = (first_death_date - first_case_date).days
            print(f"  • First death: {first_death_date.strftime('%B %d, %Y')} ({days_to_first_death} days after first case)")

# 5. Anomalies and interesting patterns
print("\n🔬 INSIGHT 5: ANOMALIES & INTERESTING PATTERNS")
print("-" * 40)

# Check for unusual patterns in the data
for country in countries:
    country_data = df_filtered[df_filtered['location'] == country]
    if not country_data.empty:
        print(f"\n{country} - Notable Patterns:")
        
        # Check for unusual spikes in new cases
        new_cases = country_data['new_cases'].dropna()
        if len(new_cases) > 0:
            mean_cases = new_cases.mean()
            max_cases = new_cases.max()
            if max_cases > mean_cases * 5:  # Spike is 5x the average
                spike_date = country_data.loc[country_data['new_cases'].idxmax(), 'date']
                print(f"  • Significant case spike: {max_cases:,.0f} cases on {spike_date.strftime('%B %d, %Y')}")
                print(f"    (5x higher than average of {mean_cases:,.0f})")
        
        # Check vaccination coverage relative to cases
        if country in vaccination_insights:
            vacc_info = vaccination_insights[country]
            total_cases = country_data['total_cases'].iloc[-1]
            vacc_to_cases_ratio = vacc_info['total_vaccinations'] / total_cases
            print(f"  • Vaccination to cases ratio: {vacc_to_cases_ratio:.1f}:1")
            
            if vacc_to_cases_ratio > 10:
                print(f"    (Excellent vaccination response - 10+ vaccines per case)")
            elif vacc_to_cases_ratio < 2:
                print(f"    (Low vaccination relative to cases)")

# Generate overall conclusions
print("\n" + "="*60)
print("EXECUTIVE SUMMARY: KEY FINDINGS")
print("="*60)

print("\n📊 COMPARATIVE ANALYSIS:")
print("1. SCALE OF IMPACT:")
latest_summary = df_filtered.groupby('location').last()
for country in countries:
    if country in latest_summary.index:
        data = latest_summary.loc[country]
        print(f"   • {country}: {data['total_cases']:,.0f} cases, {data['total_deaths']:,.0f} deaths")

print("\n2. VACCINATION SUCCESS:")
if vaccination_insights:
    # Find fastest rollout
    fastest_country = max(vaccination_insights.keys(), 
                         key=lambda x: vaccination_insights[x]['daily_average'])
    print(f"   • Fastest rollout: {fastest_country} ({vaccination_insights[fastest_country]['daily_average']:,.0f} doses/day)")
    
    # Most total vaccinations
    most_vaccinated = max(vaccination_insights.keys(), 
                         key=lambda x: vaccination_insights[x]['total_vaccinations'])
    print(f"   • Highest total: {most_vaccinated} ({vaccination_insights[most_vaccinated]['total_vaccinations']:,.0f} doses)")

print("\n3. CRITICAL OBSERVATIONS:")
print("   • Data quality varies between countries")
print("   • Vaccination data availability differs significantly")
print("   • Peak infection periods occurred at different times")
print("   • Population-adjusted metrics provide better comparisons")

print("\n4. RECOMMENDATIONS FOR FUTURE ANALYSIS:")
print("   • Include demographic data for deeper insights")
print("   • Analyze seasonal patterns in infection rates")
print("   • Study correlation between policy measures and outcomes")
print("   • Investigate economic impact alongside health metrics")

print(f"\n{'='*60}")
print("ANALYSIS COMPLETE - COMPREHENSIVE COVID-19 INSIGHTS GENERATED")
print(f"{'='*60}")

print("\n📋 SUMMARY STATISTICS:")
print(f"• Countries analyzed: {len(countries)}")
print(f"• Data points processed: {len(df_filtered):,}")
print(f"• Time period: {df_filtered['date'].min().strftime('%B %Y')} to {df_filtered['date'].max().strftime('%B %Y')}")
print(f"• Visualizations created: 15+ charts and maps")
print("\n✅ Ready for presentation and reporting!")

